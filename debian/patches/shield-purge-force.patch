Subject: Add a force option to shield-purge to remove unexpired records
Bug-Debian: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=457642
Forwarded: yes
Author: Jonathan Niehof <jtniehof@gmail.com>
Last-Update: 2010-04-19
--- a/pam_shield_lib.c
+++ b/pam_shield_lib.c
@@ -3,6 +3,7 @@
 
     pam_shield 0.9.2 WJ107
     Copyright (C) 2007  Walter de Jong <walter@heiho.net>
+    OPT_FORCE copyright 2010 Jonathan Niehof <jtniehof@gmail.com>
 
     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
@@ -61,6 +62,7 @@
 #define OPT_LISTDB				8
 #define OPT_MISSING_DNS			0x10	/* allow missing DNS */
 #define OPT_MISSING_REVERSE		0x20	/* allow missing reverse DNS */
+#define OPT_FORCE			0x40	/* purge unexpired entries */
 
 static int options = 0;
 static GDBM_FILE dbf;
--- a/shield_purge.c
+++ b/shield_purge.c
@@ -3,6 +3,7 @@
 
     pam_shield 0.9.2 WJ107
     Copyright (C) 2007  Walter de Jong <walter@heiho.net>
+    -f option Copyright 2010 Jonathan Niehof <jtniehof@gmail.com>
 
     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
@@ -50,6 +51,7 @@
 "  -d, --debug       Verbose output for debugging purposes\n"
 "  -n, --dry-run     Do not perform any updates\n"
 "  -l, --list        List all database entries\n"
+"  -f, --force       Delete all entries, even if unexpired\n"
 , basename(progname));
 
 	printf("\n"
@@ -58,7 +60,8 @@
 "are welcome to redistribute it under certain conditions.  See the GNU\n"
 "General Public Licence for details.\n"
 "\n"
-"Copyright (C) 2007 by Walter de Jong <walter@heiho.net>\n");
+"Copyright (C) 2007 by Walter de Jong <walter@heiho.net>\n"
+"Copyright 2010 Jonathan Niehof <jtniehof@gmail.com>\n");
 	exit(1);
 }
 
@@ -70,12 +73,13 @@
 	{ "conf",		1, NULL, 'c' },
 	{ "dry-run",	0, NULL, 'n' },
 	{ "list",		0, NULL, 'l' },
+	{ "force",		0, NULL, 'f' },
 };
 
 	if (argc <= 1)
 		usage(argv[0]);
 
-	while((opt = getopt_long(argc, argv, "hdc:nl", long_options, NULL)) != -1) {
+	while((opt = getopt_long(argc, argv, "hdc:nlf", long_options, NULL)) != -1) {
 		switch(opt) {
 			case 'h':
 			case '?':
@@ -107,6 +111,11 @@
 				logmsg(LOG_DEBUG, "list database");
 				break;
 
+			case 'f':
+				options |= OPT_FORCE;
+				logmsg(LOG_DEBUG, "force purge");
+				break;
+
 			default:
 				logmsg(LOG_ERR, "bad command line option");
 				exit(1);
@@ -178,7 +187,14 @@
 		data = gdbm_fetch(dbf, key);
 		next_key = gdbm_nextkey(dbf, key);
 
-		if (data.dptr == NULL) {
+		if (options & OPT_FORCE) {
+			logmsg(LOG_DEBUG, "force-expiring entry");
+			if (!(options & OPT_DRYRUN)) {
+				gdbm_delete(dbf, key);
+				deleted=1;
+			}
+		}
+		else if (data.dptr == NULL) {
 			logmsg(LOG_DEBUG, "cleaning up empty key");
 			if (!(options & OPT_DRYRUN)) {
 				gdbm_delete(dbf, key);
